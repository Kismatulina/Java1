package Java.java_sem5.homework5;
/**–£—Ä–æ–∫ 10. –°–µ–º–∏–Ω–∞—Ä 5: –•—Ä–∞–Ω–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö —á2: –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π Map
 –î–ó 
üìå –†–µ–∞–ª–∏–∑—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏ —Å –ø–æ–º–æ—â—å—é HashMap
üìå –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç–∞–∫–∂–µ –¥–æ–ª–∂–Ω–∞ —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ –≤ –≤–æ –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –±—É–¥—É—Ç
–ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∏–º–µ–Ω–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏, –∏—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å—á–∏—Ç–∞—Ç—å, –∫–∞–∫ –æ–¥–Ω–æ–≥–æ
—á–µ–ª–æ–≤–µ–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏. –í—ã–≤–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø–æ —É–±—ã–≤–∞–Ω–∏—é
—á–∏—Å–ª–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤. */
/**
–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç:
1. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª (phonebook.txt)
2. –ß—Ç–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
3. –ü–æ–¥–¥–µ—Ä–∂–∫—É —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
4. –£–ª—É—á—à–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
*/

import java.io.*;
import java.util.*;

public class Book {
    private static final String FILE_NAME = "phonebook.txt"; //static final —Å—Ç—Ä–∞–Ω–Ω–æ

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in, "UTF-8");
        Map<String, Set<String>> phoneBook = loadPhoneBook();

        System.out.println("–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞");
        System.out.println("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:");
        System.out.println("- –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: –ò–º—è –¢–µ–ª–µ—Ñ–æ–Ω");
        System.out.println("- –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã: view");
        System.out.println("- —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç: delete –ò–º—è");
        System.out.println("- –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–±–æ—Ç—É: exit");

        while (true) {
            System.out.print("\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É: ");
            String input = scanner.nextLine().trim();

            if (input.equalsIgnoreCase("exit")) {
                savePhoneBook(phoneBook);
                System.out.println("–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.");
                break;
            } else if (input.equalsIgnoreCase("view")) {
                if (phoneBook.isEmpty()) {
                    System.out.println("–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ –ø—É—Å—Ç–∞.");
                } else {
                    printSortedPhoneBook(phoneBook);
                }
            } else if (input.toLowerCase().startsWith("delete ")) {
                String nameToDelete = input.substring(7).trim();
                if (phoneBook.containsKey(nameToDelete)) {
                    phoneBook.remove(nameToDelete);
                    System.out.println("–ö–æ–Ω—Ç–∞–∫—Ç '" + nameToDelete + "' —É–¥–∞–ª–µ–Ω.");
                } else {
                    System.out.println("–ö–æ–Ω—Ç–∞–∫—Ç '" + nameToDelete + "' –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                }
            } else {
                String[] parts = input.split("\\s+", 2);
                if (parts.length != 2) {
                    System.out.println("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ò–º—è –¢–µ–ª–µ—Ñ–æ–Ω");
                    continue;
                }

                String name = parts[0];
                String phone = parts[1];

                phoneBook.computeIfAbsent(name, k -> new HashSet<>()).add(phone);
                System.out.println("–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–ª–µ—Ñ–æ–Ω " + phone + " –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ " + name);
            }
        }
        scanner.close();
    }

    private static Map<String, Set<String>> loadPhoneBook() {
        Map<String, Set<String>> phoneBook = new HashMap<>();
        try (BufferedReader reader = new BufferedReader(new FileReader(FILE_NAME))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(":", 2);
                if (parts.length == 2) {
                    String name = parts[0].trim();
                    String[] phones = parts[1].trim().split(",\\s*");
                    phoneBook.put(name, new HashSet<>(Arrays.asList(phones)));
                }
            }
            System.out.println("–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞.");
        } catch (IOException e) {
            System.out.println("–§–∞–π–ª —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ë—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π.");
        }
        return phoneBook;
    }

    private static void savePhoneBook(Map<String, Set<String>> phoneBook) {
        try (BufferedWriter writer = new BufferedWriter(new FileWriter(FILE_NAME))) {
            for (Map.Entry<String, Set<String>> entry : phoneBook.entrySet()) {
                writer.write(entry.getKey() + ": " + String.join(", ", entry.getValue()));
                writer.newLine();
            }
        } catch (IOException e) {
            System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–æ–π –∫–Ω–∏–≥–∏: " + e.getMessage());
        }
    }

    private static void printSortedPhoneBook(Map<String, Set<String>> phoneBook) {
        List<Map.Entry<String, Set<String>>> sortedEntries = new ArrayList<>(phoneBook.entrySet());
        sortedEntries.sort((e1, e2) -> Integer.compare(e2.getValue().size(), e1.getValue().size()));

        System.out.println("\n–¢–µ–ª–µ—Ñ–æ–Ω–Ω–∞—è –∫–Ω–∏–≥–∞ (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤):");
        for (Map.Entry<String, Set<String>> entry : sortedEntries) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }
}

